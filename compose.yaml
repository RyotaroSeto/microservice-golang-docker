services:
  service-1:
    container_name: service-1
    build:
      context: ./service-1
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./:/app:delegated
    networks:
      - services_network

  service-2:
    container_name: service-2
    build:
      context: ./service-2
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./:/app:delegated
    networks:
      - services_network

  zookeeper:
    container_name: zookeeper
    restart: always
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
    networks:
      - services_network

  kafka:
    container_name: kafka
    restart: always
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka
    ports:
      - "9092:9092"
      - "2181:2181"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - services_network

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka
    networks:
      - services_network

  redis:
    image: redis:6-alpine
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - services_network

  redisinsight:
    container_name: redisinsight
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    volumes:
      - ./redisinsight:/db
    depends_on:
      - redis
    networks:
      - services_network

  # etcd:
  #   container_name: etcd
  #   image: gcr.io/etcd-development/etcd:v3.4.7
  #   ports: ["12379:12379", "12380:12380"]
  #   command: >-
  #     /usr/local/bin/etcd
  #     -name etcd
  #     -data-dir /etcd-data
  #     -listen-client-urls http://0.0.0.0:12379
  #     -advertise-client-urls http://0.0.0.0:12379
  #     -listen-peer-urls http://0.0.0.0:12380
  #     -initial-advertise-peer-urls http://0.0.0.0:12380
  #     -initial-cluster etcd=http://0.0.0.0:12380
  #     -initial-cluster-token tkn
  #     -initial-cluster-state new
  #   networks:
  #     - services_network

networks:
  services_network:
    driver: bridge
